"use client";
import React, { useState, useEffect } from "react";
import Sidebar from "@/components/SideBar";
import Navbar from "@/components/Navbar";
import Link from "next/link";
import { Equipment, EquipmentHistory } from "@/types/equipment";
import Swal from "sweetalert2";

export default function MyEquipmentList() {
  const [equipmentData, setEquipmentData] =  useState<Equipment[]>([]);
  const [historyData, setHistoryData] = useState<EquipmentHistory[]>([]);
  const [selectedItem, setSelectedItem] = useState<Equipment | null>(null);
  const [showHistory, setShowHistory] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 5;
  const [filteredEquipment, setFilteredEquipment] = useState<Equipment[]>([]);
  const [searchQuery, setSearchQuery] = useState('');

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á
  useEffect(() => {
    const fetchEquipment = async () => {
      try {
        const res = await fetch("/api/equipments/owner");
        if (!res.ok) {
          throw new Error("Failed to fetch");
        }
        const data = await res.json();
        setEquipmentData(data);
      } catch (error) {
        console.error("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", error);
      }
    };
    fetchEquipment();
  }, []);

  useEffect(() => {
  const filtered = equipmentData.filter(item => 
    item.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    item.code.toLowerCase().includes(searchQuery.toLowerCase()) ||
    item.category.toLowerCase().includes(searchQuery.toLowerCase())
  );
  setFilteredEquipment(filtered);
  setCurrentPage(1); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ filter
}, [searchQuery, equipmentData]);


  // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏Ñ‡∏∑‡∏ô
  const handleShowHistory = async (item) => {
    try {
      const res = await fetch(`/api/equipment/${item.code}/history`);
      const history = await res.json();
      setSelectedItem(item);
      setHistoryData(history);
      setShowHistory(true);
    } catch (err) {
      console.error("‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", err);
    }
  };

   const totalPages = Math.ceil(filteredEquipment.length / itemsPerPage);
  const paginatedEquipment = filteredEquipment.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  const handleDelete = async (id:number)=>{
    const result = await Swal.fire({
          title: "‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
          text: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
          icon: "warning",
          showCancelButton: true,
          confirmButtonText: "‡πÉ‡∏ä‡πà, ‡∏•‡∏ö",
          cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
        });
    if (result.isConfirmed){
      try{
        const res=await fetch(`/api/equipments/${id}`,{
          method:"DELETE",
        });
        if(!res.ok){
          throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏î‡πâ")
        }
        setFilteredEquipment((prev)=> prev.filter((item) =>item.id !== id ))
        await Swal.fire("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", "‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "success");
        
      }catch (error){
        console.error(error)
        await Swal.fire("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", "‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "error");
        
      }
    }

  }
  return (
    <div className="min-h-screen flex flex-col">
      <Navbar />
      <div className="flex flex-1 mt-16">
        <Sidebar />

        <main className="flex-1 p-4 md:p-6 ml-0 text-black border rounded-md border-[#3333] bg-gray-50">
          {/* ‡πÅ‡∏ñ‡∏ß‡∏ö‡∏ô‡∏™‡∏∏‡∏î */}
          <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-4 gap-2">
            <h1 className="text-2xl font-bold text-[#4682B4]">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô</h1>
            
            <Link href="/AddItem">
            <button className="bg-[#25B99A] text-white px-4 py-2 rounded hover:bg-teal-600 w-full md:w-auto">
              ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            </button>
            </Link>
          </div>  

          {/* ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ */}
          <div className="flex flex-col sm:flex-row items-start sm:items-center gap-2 mb-4">
            <input
              type="text"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="border border-gray-300 px-4 py-1 rounded w-full sm:w-64"
              placeholder="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
            />
            <button className="bg-[#25B99A] text-white px-3 py-1 rounded hover:bg-teal-600 w-full sm:w-auto">
              ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            </button>
          </div>

          {/* Tabs ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ */}
          <div className="flex flex-wrap gap-4 mb-4 text-sm justify-end">
            {["‡∏¢‡∏∑‡∏°‡πÑ‡∏î‡πâ", "‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏¢‡∏∑‡∏°", "‡∏á‡∏î‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°", "‡πÄ‡∏•‡∏¥‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"].map(
              (status) => (
                <div key={status} className="flex items-center gap-1">
                  <span>{status}</span>
                  <span className="bg-gray-200 text-gray-800 px-2 rounded-full text-xs">
                    {
                      equipmentData.filter((item) => item.status === status)
                        .length
                    }
                  </span>
                </div>
              )
            )}
          </div>

          {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå */}
          <div className="border rounded overflow-x-auto bg-white">
            <table className="min-w-full table-auto text-sm border border-gray-200">
              <thead className="bg-[#2B5279] text-white">
                <tr>
                  <th className="px-4 py-2 text-left border-r">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</th>
                  <th className="px-4 py-2 text-center border-r">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</th>
                  <th className="px-4 py-2 text-center border-r">‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</th>
                  <th className="px-4 py-2 text-center border-r">‡∏¢‡∏∑‡∏°‡πÑ‡∏î‡πâ</th>
                  <th className="px-4 py-2 text-center border-r">‡πÄ‡∏™‡∏µ‡∏¢</th>
                  <th className="px-4 py-2 text-center border-r">‡∏´‡∏≤‡∏¢</th>
                  <th className="px-4 py-2 text-center">‡∏´‡∏ô‡πà‡∏ß‡∏¢</th>
                </tr>
              </thead>
              <tbody>
                {paginatedEquipment.map((item, i) => (
                  <tr key={i} className="border-t">
                    <td className="px-4 py-3 align-top border-r">
                      <div>
                        <div>‡∏£‡∏´‡∏±‡∏™ {item.code}</div>
                        <div>‡∏ä‡∏∑‡πà‡∏≠ : {item.name}</div>
                        <div>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà : {item.category}</div>
                        <div>
                          ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:{" "}
                          <span
                            className={`${
                              item.status === "‡∏¢‡∏∑‡∏°‡πÑ‡∏î‡πâ"
                                ? "text-green-600"
                                : item.status === "‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏¢‡∏∑‡∏°"
                                ? "text-blue-600"
                                : item.status === "‡∏á‡∏î‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°"
                                ? "text-yellow-600"
                                : "text-red-600"
                            }`}
                          >
                            {item.status}
                          </span>
                        </div>
                        <div>‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö : {item.location}</div>
                        <div className="mt-2 flex flex-wrap gap-2">
                          <Link href={`/EditItem/${item.id}`}>
                            <button className="bg-yellow-500 text-white px-3 py-1 rounded hover:bg-yellow-600 text-xs">
                              ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                            </button>
                          </Link>
                          <button
                            className="bg-gray-300 px-3 py-1 rounded text-xs hover:bg-gray-400"
                            onClick={() => handleShowHistory(item)}
                          >
                            üìà ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏¢‡∏∑‡∏°‡∏Ñ‡∏∑‡∏ô
                          </button>
                          <button
                            className="bg-[#E74C3C] px-3 py-1 rounded text-xs hover:bg-[#b24236] text-white"
                            onClick={() => handleDelete(item.id)}
                          >
                           üóëÔ∏è ‡∏•‡∏ö
                          </button>
                        </div>
                      </div>
                    </td>
                    <td className="px-4 py-3 text-center border-r">
                      {item.all}
                    </td>
                    <td className="px-4 py-3 text-center border-r">
                      {item.used}
                    </td>
                    <td className="px-4 py-3 text-center border-r">
                      {item.available}
                    </td>
                    <td className="px-4 py-3 text-center border-r">
                      {item.broken}
                    </td>
                    <td className="px-4 py-3 text-center border-r">
                      {item.lost}
                    </td>
                    <td className="px-4 py-3 text-center">{item.unit}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {/* ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤ */}
          <div className="flex items-center justify-center mt-6 select-none text-[#25B99A]">
            <button
              className="px-2 py-1 border rounded-l border-gray-300 disabled:opacity-30"
              disabled={currentPage === 1}
              onClick={() => setCurrentPage(1)}
            >
              {"<<"}
            </button>
            <button
              className="px-2 py-1 border border-gray-300 disabled:opacity-30"
              disabled={currentPage === 1}
              onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
            >
              {"<"}
            </button>
            {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (
              <button
                key={page}
                onClick={() => setCurrentPage(page)}
                className={`px-3 py-1 border border-gray-300 ${
                  currentPage === page
                    ? "bg-gray-200 font-bold"
                    : "hover:bg-gray-100"
                }`}
              >
                {page}
              </button>
            ))}
            <button
              className="px-2 py-1 border border-gray-300 disabled:opacity-30"
              disabled={currentPage === totalPages}
              onClick={() =>
                setCurrentPage((prev) => Math.min(prev + 1, totalPages))
              }
            >
              {">"}
            </button>
            <button
              className="px-2 py-1 border border-gray-300 rounded-r disabled:opacity-30"
              disabled={currentPage === totalPages}
              onClick={() => setCurrentPage(totalPages)}
            >
              {">>"}
            </button>
          </div>

          {/* Modal ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏° */}
          {showHistory && selectedItem && (
            <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
              <div className="bg-white rounded-lg shadow-lg w-[90%] max-w-5xl max-h-[90%] overflow-y-auto p-6 relative">
                <button
                  onClick={() => setShowHistory(false)}
                  className="absolute top-2 right-3 text-lg font-bold text-gray-600 hover:text-black"
                >
                  ‚úï
                </button>
                <h2 className="text-xl font-bold mb-4">
                  ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥: {selectedItem.name}
                </h2>
                <div className="overflow-x-auto">
                  <table className="min-w-full table-auto border text-sm">
                    <thead className="bg-sky-900 text-white">
                      <tr>
                        <th className="px-2 py-2 border">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°</th>
                        <th className="px-2 py-2 border">‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</th>
                        <th className="px-2 py-2 border">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°</th>
                        <th className="px-2 py-2 border">‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô</th>
                        <th className="px-2 py-2 border">‡∏Ñ‡∏∑‡∏ô‡∏à‡∏£‡∏¥‡∏á</th>
                        <th className="px-2 py-2 border">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th>
                        <th className="px-2 py-2 border">‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ</th>
                        <th className="px-2 py-2 border">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                      </tr>
                    </thead>
                    <tbody>
                      {historyData.map((item, i) => (
                        <tr key={i} className="border-b">
                          <td className="border px-2 py-1 text-center">{item.id}</td>
                          <td className="border px-2 py-1">{item.name}</td>
                          <td className="border px-2 py-1 text-center">{item.borrowDate}</td>
                          <td className="border px-2 py-1 text-center">{item.dueDate}</td>
                          <td className="border px-2 py-1 text-center">{item.returnDate}</td>
                          <td className="border px-2 py-1 text-center">{item.quantity}</td>
                          <td className="border px-2 py-1 text-center">{item.place}</td>
                          <td className="border px-2 py-1 text-center">
                            <span className={`px-2 py-1 rounded text-xs ${item.statusColor}`}>
                              {item.status}
                            </span>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          )}
        </main>
      </div>
    </div>
  );
}
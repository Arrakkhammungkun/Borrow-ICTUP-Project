generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int               @id @default(autoincrement())
  email          String            @unique
  created_at     DateTime          @default(now())
  first_name     String?
  last_name      String?
  prefix         String?
  title          String?
  up_id          String            @unique
  displayName    String?
  jobTitle       String?
  mobilePhone    String?
  officeLocation String?
  updated_at     DateTime          @updatedAt
  equipments     Equipment[]       @relation("UserEquipment") // เพิ่มฟิลด์นี้เพื่อระบุความสัมพันธ์
  borrowings     Borrowing[]       @relation("Borrower") // ความสัมพันธ์กับผู้ยืม
  approvals      BorrowingDetail[] @relation("Approver") // ความสัมพันธ์กับผู้อนุมัติ
}

model Equipment {
  equipment_id      Int                 @id @default(autoincrement())
  name              String
  serialNumber      String?             @unique
  category          String
  description       String
  total             Int
  availableQuantity Int                 @default(0)
  brokenQuantity    Int                 @default(0)
  lostQuantity      Int                 @default(0)
  inUseQuantity     Int                 @default(0)
  status            EquipmentStatus     @default(AVAILABLE)
  unit              String
  storageLocation   String
  createdAt         DateTime            @default(now())
  feature           String
  ownerId           Int
  isIndividual      Boolean             @default(false) // บอกว่า track รายชิ้นหรือไม่
  owner             User                @relation("UserEquipment", fields: [ownerId], references: [id])
  instances         EquipmentInstance[]
  borrowingDetails  BorrowingDetail[]
}

enum EquipmentStatus {
  AVAILABLE
  UNAVAILABLE
  IN_USE
  BROKEN
  LOST
}

model Borrowing {
  id                 Int               @id @default(autoincrement())
  borrowerId         Int // User_id ใน design ของคุณ (ผู้ยืม)
  borrowedDate       DateTime? // วันที่รับของ ยืม
  dueDate            DateTime? // Due_date
  returnedDate       DateTime? // date_returned
  status             BorrowingStatus   @default(PENDING) // status
  requestedStartDate DateTime? //วันที่ต้องการขอยืม
  location           String? // เพิ่ม field นี้สำหรับสถานที่นำไปใช้
  reason             String? // เพิ่ม field นี้สำหรับหมายเหตุ
  borrower_title     String?
  borrower_firstname String?
  borrower_lastname  String?
  borrower_position  String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  borrower           User              @relation("Borrower", fields: [borrowerId], references: [id])
  details            BorrowingDetail[]
  returnStatusColor  String?
}

enum BorrowingStatus {
  PENDING // รออนุมัติ
  APPROVED // อนุมัติแล้ว (พร้อมยืม)
  REJECTED // ปฏิเสธ
  BORROWED // ยืมออกไปแล้ว
  RETURNED // คืนแล้ว
  OVERDUE // เลยกำหนด
}

model BorrowingDetail {
  id                   Int                @id @default(autoincrement())
  borrowingId          Int
  equipmentId          Int // optional สำหรับ quantity-based
  equipmentInstanceId  Int? // optional สำหรับ individual-based
  quantityBorrowed     Int                @default(1) // จำนวนที่ยืม (แทน QRT ถ้าเป็น Quantity)
  quantityReturned     Int                @default(0) // จำนวนที่คืน (ถ้า QRT หมายถึง Quantity Returned)
  quantityLost         Int                @default(0)
  conditionAfterReturn String? // condition_after_return
  note                 String? // Note
  department           String?
  approvalStatus       ApprovalStatus     @default(PENDING) // สถานะอนุมัติ per อุปกรณ์
  approvedAt           DateTime? // เวลาที่อนุมัติ
  approvedById         Int? // ผู้อนุมัติ (ควรเป็น owner ของ Equipment)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  borrowing            Borrowing          @relation(fields: [borrowingId], references: [id])
  equipment            Equipment          @relation(fields: [equipmentId], references: [equipment_id])
  equipmentInstance    EquipmentInstance? @relation("EquipmentInstanceToBorrowingDetail", fields: [equipmentInstanceId], references: [id]) // เพิ่ม relation นี้
  approvedBy           User?              @relation("Approver", fields: [approvedById], references: [id])
  returnHistories      ReturnHistory[]
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

model ReturnHistory {
  id                Int             @id @default(autoincrement())
  borrowingDetailId Int
  complete          Int
  incomplete        Int
  lost              Int
  note              String?
  returnedAt        DateTime        @default(now())
  borrowingDetail   BorrowingDetail @relation(fields: [borrowingDetailId], references: [id])
}

model EquipmentInstance {
  id               Int               @id @default(autoincrement())
  equipmentId      Int
  serialNumber     String            @unique
  status           EquipmentStatus   @default(AVAILABLE)
  location         String?
  note             String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  equipment        Equipment         @relation(fields: [equipmentId], references: [equipment_id], onDelete: Cascade)
  borrowingDetails BorrowingDetail[] @relation("EquipmentInstanceToBorrowingDetail") // เพิ่มชื่อ relation เพื่อป้องกัน conflict
}

/*model EquipmentInstanceHistory {   เพื่อในอนาคต เพิ่ม history EquipmentInstanceHistory[] ใน EquipmentInstance 
  id                Int       @id @default(autoincrement())
  equipmentInstanceId Int
  action            String    // เช่น 'BORROW', 'RETURN', 'REPAIR', 'LOST'
  date              DateTime  @default(now())
  note              String?
  userId            Int?      // ผู้ทำการ
  borrowingDetailId Int?      // เชื่อมกับ BorrowingDetail ถ้าเกี่ยว
  equipmentInstance EquipmentInstance @relation(fields: [equipmentInstanceId], references: [id], onDelete: Cascade)
  user              User?     @relation(fields: [userId], references: [id])
}  */
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int               @id @default(autoincrement())
  email          String            @unique
  created_at     DateTime          @default(now())
  first_name     String?
  last_name      String?
  prefix         String?
  title          String?
  up_id          String            @unique
  displayName    String?
  jobTitle       String?
  mobilePhone    String?
  officeLocation String?
  updated_at     DateTime          @updatedAt
  borrowings     Borrowing[]       @relation("Borrower")
  approvals      BorrowingDetail[] @relation("Approver")
  equipments     Equipment[]       @relation("UserEquipment")
}

model Equipment {
  equipment_id      Int                 @id @default(autoincrement())
  name              String
  serialNumber      String?             @unique
  category          String
  description       String
  total             Int
  status            EquipmentStatus     @default(AVAILABLE)
  unit              String
  storageLocation   String
  createdAt         DateTime            @default(now())
  feature           String
  ownerId           Int
  availableQuantity Int                 @default(0)
  brokenQuantity    Int                 @default(0)
  inUseQuantity     Int                 @default(0)
  isIndividual      Boolean             @default(false)
  lostQuantity      Int                 @default(0)
  borrowingDetails  BorrowingDetail[]
  owner             User                @relation("UserEquipment", fields: [ownerId], references: [id])
  instances         EquipmentInstance[]
}

model Borrowing {
  id                 Int               @id @default(autoincrement())
  borrowerId         Int
  borrowedDate       DateTime?
  dueDate            DateTime?
  returnedDate       DateTime?
  status             BorrowingStatus   @default(PENDING)
  requestedStartDate DateTime?
  location           String?
  reason             String?
  borrower_title     String?
  borrower_firstname String?
  borrower_lastname  String?
  borrower_position  String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  returnStatusColor  String?
  borrower           User              @relation("Borrower", fields: [borrowerId], references: [id])
  details            BorrowingDetail[]
}

model BorrowingDetail {
  id                   Int                @id @default(autoincrement())
  borrowingId          Int
  equipmentId          Int
  equipmentInstanceId  Int?
  quantityBorrowed     Int                @default(1)
  quantityReturned     Int                @default(0)
  quantityLost         Int                @default(0)
  conditionAfterReturn String?
  note                 String?
  department           String?
  approvalStatus       ApprovalStatus     @default(PENDING)
  approvedAt           DateTime?
  approvedById         Int?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  approvedBy           User?              @relation("Approver", fields: [approvedById], references: [id])
  borrowing            Borrowing          @relation(fields: [borrowingId], references: [id])
  equipment            Equipment          @relation(fields: [equipmentId], references: [equipment_id])
  equipmentInstance    EquipmentInstance? @relation("EquipmentInstanceToBorrowingDetail", fields: [equipmentInstanceId], references: [id])
  returnHistories      ReturnHistory[]
}

model ReturnHistory {
  id                Int             @id @default(autoincrement())
  borrowingDetailId Int
  complete          Int
  incomplete        Int
  lost              Int
  note              String?
  returnedAt        DateTime        @default(now())
  borrowingDetail   BorrowingDetail @relation(fields: [borrowingDetailId], references: [id])
}

model EquipmentInstance {
  id               Int               @id @default(autoincrement())
  equipmentId      Int
  serialNumber     String            @unique
  status           EquipmentStatus   @default(AVAILABLE)
  location         String?
  note             String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  borrowingDetails BorrowingDetail[] @relation("EquipmentInstanceToBorrowingDetail")
  equipment        Equipment         @relation(fields: [equipmentId], references: [equipment_id], onDelete: Cascade)
}

enum EquipmentStatus {
  AVAILABLE
  UNAVAILABLE
  IN_USE
  BROKEN
  LOST
}

enum BorrowingStatus {
  PENDING
  APPROVED
  REJECTED
  BORROWED
  RETURNED
  OVERDUE
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}
